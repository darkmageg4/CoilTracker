/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template coils, choose Tools | Templates
 * and open the template in the editor.
 */
package coiltracker;

import java.awt.Toolkit;
import java.io.EOFException;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 *
 * @author mageg
 */
public class CoilTrackerJFrame extends javax.swing.JFrame {

    CoilChanged coilChanged;
    ArrayList<CoilChanged> history = new ArrayList<>();
    ArrayList<CoilChanged> tmp = new ArrayList<>();
    ArrayList<Mod> mod = new ArrayList<>();
    ArrayList<Mod> modtmp = new ArrayList<>();

    File coils = new File("CoilTracker.ct");
    File mods = new File("Mods.ct");

    /**
     * Creates new form CoilTrackerJFrame
     */
    public CoilTrackerJFrame() {
        initComponents();

        coilChanged = new CoilChanged();
        this.setTitle("Coil Tracker");
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource("CoilTracker.png")));

//        this.jComboBoxVape.addItem(Mods.Pockex1);
//        this.jComboBoxVape.addItem(Mods.Pockex2);
        LoadMods();
        this.jComboBoxMods.removeAllItems();
        this.jComboBoxVape.removeAllItems();
        for (Mod s : mod) {
            this.jComboBoxVape.addItem(s);
//            System.out.printf("%s\n", s);
            this.jComboBoxMods.addItem(s);
        }

        Load();
        Comparison();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBoxVape = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextFieldDateChanged = new javax.swing.JTextField();
        jButtonSave = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButtonDelete = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jComboBoxMods = new javax.swing.JComboBox();
        jButtonAddMod = new javax.swing.JButton();
        jButtonRemoveMod = new javax.swing.JButton();
        jTextFieldSinceLast = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jComboBoxVape.setToolTipText("");

        jLabel1.setText("Which Mod?");

        jLabel2.setText("Date Changed");

        jTextFieldDateChanged.setToolTipText("Defaults to today if left blank");

        jButtonSave.setText("Save");
        jButtonSave.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(10);
        jTextArea1.setRows(8);
        jScrollPane1.setViewportView(jTextArea1);

        jButtonDelete.setText("Delete");
        jButtonDelete.setToolTipText("Removes last entry in the list");
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });

        jLabel3.setText("Time since last change");

        jComboBoxMods.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBoxModsItemStateChanged(evt);
            }
        });

        jButtonAddMod.setText("Add");
        jButtonAddMod.setToolTipText("Add mod");
        jButtonAddMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddModActionPerformed(evt);
            }
        });

        jButtonRemoveMod.setText("Remove");
        jButtonRemoveMod.setToolTipText("Remove mod");
        jButtonRemoveMod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveModActionPerformed(evt);
            }
        });

        jLabel4.setText("Mods");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonSave)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1)
                        .addComponent(jComboBoxVape, 0, 168, Short.MAX_VALUE)
                        .addComponent(jTextFieldDateChanged))
                    .addComponent(jButtonDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel3)
                        .addComponent(jComboBoxMods, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jButtonAddMod)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButtonRemoveMod))
                        .addComponent(jTextFieldSinceLast))
                    .addComponent(jLabel4))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBoxVape, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextFieldDateChanged, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButtonSave)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonDelete)
                        .addGap(0, 28, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBoxMods, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextFieldSinceLast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(20, 20, 20)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jButtonAddMod)
                                    .addComponent(jButtonRemoveMod))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
        if (!"".equals(this.jTextFieldDateChanged.getText())) {
            String d = this.jTextFieldDateChanged.getText();
            boolean test = isValidDate(d);
            if (test == false) {
                JOptionPane.showMessageDialog(this, "That's not a valid date!", "Invalid Entry", JOptionPane.ERROR_MESSAGE);
            } else {
                history.add(new CoilChanged(this.jComboBoxVape.getSelectedItem().toString(), this.jTextFieldDateChanged.getText()));
                System.out.println(test);
            }
        } else {
            SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yy");
            String today = sdf.format(new Date());
            history.add(new CoilChanged(this.jComboBoxVape.getSelectedItem().toString(), today.toString()));
        }
        Save();

    }//GEN-LAST:event_jButtonSaveActionPerformed

    private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
        // TODO add your handling code here:
        int i = history.size() - 1;
        history.remove(i);
        Save();
    }//GEN-LAST:event_jButtonDeleteActionPerformed

    private void jButtonAddModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddModActionPerformed
        // TODO add your handling code here:
        String modName = (JOptionPane.showInputDialog(this, "Mod Name:", "Add Mod", JOptionPane.QUESTION_MESSAGE));
        if (!"".equals(modName) && modName != null) {
            mod.add(new Mod(modName));
            SaveMods();
        }

    }//GEN-LAST:event_jButtonAddModActionPerformed

    private void jButtonRemoveModActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveModActionPerformed
        // TODO add your handling code here:
        JComboBox rem = new JComboBox();
        rem.removeAllItems();
        for (Mod s : mod) {
            rem.addItem(s);
        }

        int remove = JOptionPane.showConfirmDialog(this, rem, "Which Mod?", JOptionPane.OK_CANCEL_OPTION, JOptionPane.DEFAULT_OPTION);
        try {
            if (remove == 0) {
                mod.remove(rem.getSelectedIndex());
                SaveMods();
            }
        } catch (Exception ex) {
        }

    }//GEN-LAST:event_jButtonRemoveModActionPerformed

    private void jComboBoxModsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBoxModsItemStateChanged
        // TODO add your handling code here:
        Comparison();
    }//GEN-LAST:event_jComboBoxModsItemStateChanged

    private void Load() {
        try {
            FileInputStream fi = new FileInputStream(coils);
            ObjectInputStream input = new ObjectInputStream(fi);

            while (true) {
                CoilChanged s = (CoilChanged) input.readObject();
                tmp.add(s);
            }

        } catch (EOFException ex) {
            //Fuck off error
        } catch (IOException | ClassNotFoundException ex) {
        }

        history.addAll(tmp);
        TestSize();
        this.jTextArea1.setText("Mod\tChanged\n");
        this.jTextArea1.append("-----------------------------------\n");

        for (CoilChanged s : history) {
            this.jTextArea1.append(String.format("%s\n", s));
        }

    }

    private void LoadMods() {
        try {
            FileInputStream fi = new FileInputStream(mods);
            ObjectInputStream input = new ObjectInputStream(fi);

            while (true) {
                Mod s = (Mod) input.readObject();
                modtmp.add(s);
            }

        } catch (EOFException ex) {
            //Fuck off error
        } catch (IOException | ClassNotFoundException ex) {
        }

        mod.addAll(modtmp);
        this.jComboBoxVape.removeAllItems();
        this.jComboBoxMods.removeAllItems();
        for (Mod s : mod) {
            this.jComboBoxVape.addItem(s);
//            System.out.printf("%s\n", s);
            this.jComboBoxMods.addItem(s);
        }

    }

    private void Save() {
        try {
            FileOutputStream fo = new FileOutputStream(coils);
            ObjectOutputStream output = new ObjectOutputStream(fo);
            this.jTextArea1.setText("Mod\tChanged\n");
            this.jTextArea1.append("-----------------------------------\n");
            TestSize();
            Collections.sort(history, new DateChangedComparator());
            for (CoilChanged s : history) {
                output.writeObject(s);
//                System.out.println(s);
                this.jTextArea1.append(String.format("%s\n", s));
            }
            output.close();
            fo.close();
        } catch (IOException ex) {
        }

        Comparison();
        this.jTextFieldDateChanged.setText("");
        this.jComboBoxVape.setSelectedIndex(0);
    }

    private void SaveMods() {
        try {
            FileOutputStream fo = new FileOutputStream(mods);
            ObjectOutputStream output = new ObjectOutputStream(fo);
            this.jComboBoxVape.removeAllItems();
            this.jComboBoxMods.removeAllItems();
//            Collections.sort(history, new DateChangedComparator());
            for (Mod s : mod) {
                output.writeObject(s);
//                System.out.println(s);
                this.jComboBoxVape.addItem(s);
                this.jComboBoxMods.addItem(s);

            }
            output.close();
            fo.close();
        } catch (IOException ex) {
        }

        Comparison();
        this.jComboBoxVape.setSelectedIndex(0);
    }

    /**
     * Tests the size of the ArrayList and removes oldest entries
     */
    private void TestSize() {
        while (history.size() > 10) {
            int i = 0;
            history.remove(i);
            i++;
        }
    }

    /**
     * Compares today's date with the last coil change and gives the difference
     * in days
     */
    private void Comparison() {
        try {
            this.jTextFieldSinceLast.setText("");
            // Compare Mods with last entry of mod
            int i = history.size() - 1;
            while (true) {
                String p1 = this.jComboBoxMods.getSelectedItem().toString();
                String dA = history.get(i).getName();
                if (dA.equals(p1)) {
                    try {
                        Date today = new Date();
                        Date last = new SimpleDateFormat("dd/MM/yy").parse(history.get(i).getDateChanged());
                        long diff = (today.getTime() % last.getTime());
                        int days = (int) TimeUnit.MILLISECONDS.toDays(diff);
                        this.jTextFieldSinceLast.setText(String.format("%d days", days));
                        break;
                    } catch (ParseException ex) {
                        Logger.getLogger(CoilTrackerJFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                } else {
                    i--;
                }
            }
        } catch (Exception ex) {
        }
    }
    
    private boolean isValidDate(String d) {
    SimpleDateFormat myDateFormat = new SimpleDateFormat("dd/MM/yyyy");
    myDateFormat.setLenient(false);
    try {
        myDateFormat.parse(d);
    } catch (ParseException e) {
        return false;
    }
    return true;
}

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CoilTrackerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CoilTrackerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CoilTrackerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CoilTrackerJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CoilTrackerJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddMod;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonRemoveMod;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JComboBox jComboBoxMods;
    private javax.swing.JComboBox jComboBoxVape;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextFieldDateChanged;
    private javax.swing.JTextField jTextFieldSinceLast;
    // End of variables declaration//GEN-END:variables
}
